name: release
on:
  push:
    tags:
    - "v[0-9]+.[1-9]+.[0-9]*"
jobs:
  release:
    runs-on: X64
    steps:
      - name: Cleanup Runner Workspace...
        if: always()
        run: |
          echo "Cleaning up previous run"
          bash -c "env"
          sudo bash -c "rm -rf $GITHUB_WORKSPACE"

      - name: Checkout
        uses: actions/checkout@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          export POSTFIX=" (Codename: '$(cat CODENAME)')"
          echo "RELEASE_NAME_SUFFIX=$POSTFIX" >> $GITHUB_ENV
      - name: Print Release Version
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          export RELEASE_VERSION=$(echo $GITHUB_REF | awk -F\/ '{print $3}')
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "Release Version is $RELEASE_VERSION" 
          echo "$RELEASE_VERSION" > VERSION
          if echo "$RELEASE_VERSION" | grep "rc" > /dev/null ; then
            echo "RELEASE_PRE=true" >> $GITHUB_ENV
            echo "RELEASE_LATEST=false" >> $GITHUB_ENV
          else
            echo "RELEASE_PRE=false" >> $GITHUB_ENV
            echo "RELEASE_LATEST=true" >> $GITHUB_ENV
          fi
      - name: Create Plugins
        run: |
          bash -c "chmod 755 .github/scripts/plugins.sh; .github/scripts/plugins.sh"
          bash -c "cd plugins/kubectl;  tar zcvf ../../bob-plugins-${{ env.RELEASE_VERSION }}.tgz *; cd ../.."
      - name: Prebuild
        run: |
          bash -c "cd distro; wget https://github.com/262life/bob-ubuntu-image/releases/latest/download/ubuntu-focal-arm64-latest.tar.gz"
          bash -c "cd distro; wget https://github.com/262life/bob-ubuntu-image/releases/latest/download/ubuntu-focal-amd64-latest.tar.gz"
          bash -c "cd distro; wget https://github.com/262life/bob-ubuntu-image/releases/latest/download/squashed-lowcarb-arm64.tar.gz"
          bash -c "cd distro; wget https://github.com/262life/bob-ubuntu-image/releases/latest/download/squashed-lowcarb-amd64.tar.gz"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_TOKEN }}


      - name: Prepare ALL IMAGES
        run: |
          bash -c "chmod 755 files/*; chmod 644 files/*.conf files/README"
      - name: Prepare bob-core
        id: prep-core
        run: |
          DOCKER_IMAGE="262life/bob-core"
          TAGS="${DOCKER_IMAGE}:${RELEASE_VERSION}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $RELEASE_LATEST =~ "true" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Build bob-core
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./dockerfiles/Dockerfile-core
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep-core.outputs.tags }}

      - name: Prepare bob-lowcarb
        id: prep-lowcarb
        run: |
          DOCKER_IMAGE="262life/bob-lowcarb"
          TAGS="${DOCKER_IMAGE}:${RELEASE_VERSION}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $RELEASE_LATEST =~ "true" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Build bob-lowcarb
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./dockerfiles/Dockerfile-lowcarb
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep-lowcarb.outputs.tags }}

##          bash -c "chmod 755 files/*; chmod 644 files/*.conf files/README"
##          bash -c "chmod 755 .github/scripts/init.sh; LATEST=${{ env.RELEASE_LATEST }} PUBLISH=true TAG=$RELEASE_VERSION DOCKERFILE=dockerfiles/Dockerfile-core      .github/scripts/init.sh bob-core"
##          bash -c "chmod 755 .github/scripts/init.sh; LATEST=${{ env.RELEASE_LATEST }} PUBLISH=true TAG=$RELEASE_VERSION DOCKERFILE=dockerfiles/Dockerfile-lowcarb .github/scripts/init.sh bob-lowcarb"

      - name: Build Maintenance
        #env: # Or as an environment variable
        #    docker_login: ${{ secrets.DOCKER_ID }}
        #    docker_token: ${{ secrets.DOCKER_TOKEN }}
        run: |
          bash -c "chmod 755 .github/scripts/charts.sh; .github/scripts/charts.sh"
          bash -c "chmod 755 .github/scripts/update_readme.sh; .github/scripts/update_readme.sh"
          bash -c "chmod 755 .github/scripts/helpdocs.sh; .github/scripts/helpdocs.sh"

      - name: Run Snyk to check Docker image for vulnerabilities - bob-core
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 262life/bob-core:${{ env.RELEASE_VERSION }}
          args: --severity-threshold=high --debug
          command: monitor
      - name: Run Snyk to check Docker image for vulnerabilities - bob-lowcarb
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 262life/bob-lowcarb:${{ env.RELEASE_VERSION }}
          args: --severity-threshold=high --debug
          command: monitor
      #- name: Run Snyk to check Kubernetes manifest file for issues
      #  uses: snyk/actions/iac@master
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #  with:
      #    args: --severity-threshold=high --debug
      #    file: helm/chart/templates/deployment.yaml
      #    command: test
      - name: push
        uses: github-actions-x/commit@v2.6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: 'master'
          commit-message: 'publish'
          force-add: 'true'
          files: README.md VERSION index.yaml helm/repo/*.tgz docs/commands.md docs/commands/* helm/chart/*
          name: rsliotta
          email: bob@262.life

      - name: Release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG_FILE: "CHANGES.md"
          DRAFT_RELEASE: "false"
          PRE_RELEASE: "${{ env.RELEASE_PRE }}"
          ALLOW_EMPTY_CHANGELOG: "false"
          ### ALLOW_TAG_PREFIX: "true"
        with:
          args: |
            examples/testpv.yaml
            bob-plugins-${{ env.RELEASE_VERSION }}.tgz
            plugins/installer.sh
            helm/bob-helm-${{ env.RELEASE_VERSION }}.tgz

      - name: notification
        uses: Lukasss93/telegram-action@v2
        env:
            TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
            TELEGRAM_CHAT: ${{ secrets.ALT_TELEGRAM_TO_BOT }}
        with:
          status: ${{job.status}}
 
