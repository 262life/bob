#!/usr/bin/env bash 

#-----  Main

main() {

DEBUG=1 ## for Options

opts=$*
optspec=":nhv-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -  )
            case "${OPTARG}" in
                help        ) help                ;;
                context     ) getArrayOpt   $opts ;;
                context=*   ) getArrayOptEq $opts ;;
                pvc         ) getArrayOpt   $opts ;;
                pvc=*       ) getArrayOptEq $opts ;;
                name        ) getTextOpt    $opts ;;
                name=*      ) getTextOptEq  $opts ;;
                namespace   ) getTextOpt    $opts ;;
                namespace=* ) getTextOptEq  $opts ;;
                *          ) badEgg               ;;
            esac;;
        h  ) help                                      ;;
        v  ) VERBOSITY=("${VERBOSITY[@]}" "$val")      ;;
        n  ) OPTARG='namespace' getTextOpt $opts       ;;
        *  ) badEgg                 ;;
    esac
done


VB=${#VERBOSITY[@]}
[ $VB -gt 0 ] && echo
[ $VB -gt 0 ] && echo Verbosity set to: ${#VERBOSITY[@]}
[ $VB -gt 0 ] && echo Requested list of PVC

for (( i = 0; i < ${#OPT_PVC[@]}; i++ ))
do
  [ $VB -gt  0 ] && echo - PVC: ${OPT_PVC[$i]}
done

POD_NAME=${OPT_NAME:-$(getDictWords)}
[ $VB -gt  0 ] && echo POD Name: $POD_NAME

[ ${OPT_NAMESPACE:-none} == 'none' ] && POD_NAMESPACE='' || POD_NAMESPACE="namespace: $OPT_NAMESPACE"
[ $VB -gt  0 ] && echo POD Namespace: $POD_NAMESPACE


exit

#echo ---- set
#set
#echo ---- ENV
#env


#echo ""
#echo "Command: $cmd"

cat << END | kubectl $OPT_CONTEXT apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
  ${POD_NAMESPACE}
  labels:
    app: spar
spec:
  terminationGracePeriodSeconds: 20
  containers:
  - image: docker-dev-local.logistics.corp/spar:1.1mini
    imagePullPolicy: Always
    name: ${POD_NAME}
    ports:
    - containerPort: 80
      name: dummy
      protocol: TCP
    resources:
      limits:
        memory: "2Gi"
        cpu: "2"
      requests:
        memory: "2Gi"
        cpu: "2"
    volumeMounts:
#    - name: cert-volume
#      mountPath: /etc/pki
    - name: spar-pv-claim
      mountPath: /usr
  restartPolicy: Always
  volumes:
#  - name: cert-volume
#    hostPath:
#      path: "/etc/pki"
#      type: Directory
  - name: spar-pv-claim
#    persistentVolumeClaim:
#      claimName: myapp-nfs
    nfs:
      server: localhost
      path: /usr
END

}

###########

help() {
            echo "usage: $0 [-v] [--pvc[=]<value>]" >&2
            echo ; exit 2
}

getTextOpt() {

  val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
  [ $DEBUG == 1 ] && echo "Parsing option: '--${OPTARG}', value: '${val}'" >&2;
  typeset X=${OPTARG}
  eval OPT_$X="$val"

}

getTextOptEq() {

  val=${OPTARG#*=}
  opt=${OPTARG%=$val}
  [ $DEBUG == 1 ] && echo "Parsing option: '--${opt}', value: '${val}'" >&2
  typeset X=${opt}
  eval OPT_$X="$val"
}

getArrayOpt() {

  val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
  [ $DEBUG == 1 ] && echo "Parsing option: '--${OPTARG}', value: '${val}'" >&2;
  typeset X=${OPTARG} 
  eval OPT_$X=\(\${"OPT_$X[@]}" "${val}"\)

}

getArrayOptEq() {

  val=${OPTARG#*=}
  opt=${OPTARG%=$val}
  [ $DEBUG == 1 ] && echo "Parsing option: '--${OPTARG}', value: '${val}'" >&2;
  typeset X=${opt} 
  eval OPT_$X=\(\${"OPT_$X[@]}" "${val}"\)

}

badEgg() {

  echo
  if [ "$OPTERR" = 1 ] && [ "${optchar}" = "-" ]; then
    echo "Invalid parameter: --${OPTARG}" >&2
  elif [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
    echo "Invalid parameter: -${OPTARG}" >&2
  fi

  help; exit

}

###########

declare -a OPT_PVC VERBOSITY 

. $(dirname $0)/bob-words

main "$@"; exit


